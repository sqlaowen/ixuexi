<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:springRedis/redis.properties"/>
	</bean>
	
    <!-- 读取redis 连接池  -->
	<bean id="jedisConnectionFactoryForRead" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
		<property name="hostName" value="${redis.read.hostname}" />
		<property name="port" value="${redis.read.port}" />
		<property name="database" value="${redis.read.database}" />
		<property name="password" value="${redis.read.password}" />
	</bean>
	
	<!-- 写入redis 连接池  -->
	<bean id="jedisConnectionFactoryForWrite" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
		<property name="hostName" value="${redis.write.hostname}" />
		<property name="port" value="${redis.write.port}" />
		<property name="database" value="${redis.write.database}" />
		<property name="password" value="${redis.write.password}" />
	</bean>
	
	<!-- 对string操作的封装 -->
	<!-- redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->
	<!-- 写 -->
	<bean id="stringRedisTemplateForWrite" class="org.springframework.data.redis.core.StringRedisTemplate"
		 p:connection-factory-ref="jedisConnectionFactoryForWrite" />
	
	<!-- 读 -->
	<bean id="stringRedisTemplateForRead" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactoryForRead"/>
	</bean>
	
	<bean id="redisService" class="cn.ziran.xredis.RedisServiceImpl">
	    <property name="stringRedisTemplateForWrite" ref="stringRedisTemplateForWrite"/>
	    <property name="stringRedisTemplateForRead"  ref="stringRedisTemplateForRead"/>
	</bean>
	
	<!-- 
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
		 -->
		<!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->
		<!-- 
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>

	</bean>
	 -->
</beans>