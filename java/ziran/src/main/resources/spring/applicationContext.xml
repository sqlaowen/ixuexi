<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

	<context:property-placeholder location="classpath:db/db.properties" />
	
	<!-- <import resource="classpath:env/property_configurer.xml" /> -->

	<!-- 启用注解 -->
	<mvc:annotation-driven />
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- <property name="maxActive" value="100" /> -->
		<!-- <property name="initialSize" value="30" /> -->
		<!-- <property name="minIdle" value="20" /> -->
		<!-- <property name="maxWait" value="60000" /> -->
	</bean>

	<!-- mybatis sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis.cfg.xml" />
		<!-- 分页插件 -->
		<property name="plugins">
			<bean class="com.github.pagehelper.PageHelper">
				<property name="properties">
					<value>
						dialect=oracle
						reasonable=true
						pageSizeZero=true
					</value>
				</property>
			</bean>
		</property>
	</bean>

	<!-- mapper扫描器 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="cn.ziran.mapper"></property> <property name="sqlSessionFactoryBeanName" 
		value="sqlSessionFactory" /> </bean> -->

	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务拦截器,激活事务管理器所必须的bean -->
	<!-- <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor"> 
		<property name="transactionManager" ref="transactionManager" /> 配置事务属性 <property 
		name="transactionAttributes"> <props> <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop> 
		<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop> <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop> 
		<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop> <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop> 
		<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop> </props> </property> 
		</bean> -->
	<!-- 定义事务处理代理bean,他需要两个属性,一个是指定需要代理的bean,另一个是代理bean所需的事务拦截器 -->
	<!-- <bean id="beanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> 
		<property name="beanNames"> <value>*Service</value> </property> <property 
		name="interceptorNames"> <value>transactionInterceptor</value> </property> 
		</bean> -->
		
	<!-- 或者 -->
	
	<!-- 通知 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="query*" propagation="REQUIRED" /> <tx:method 
		name="insert*" propagation="REQUIRED" /> <tx:method name="update*" propagation="REQUIRED" 
		/> </tx:attributes> </tx:advice> aop 代理设置 <aop:config> 只对业务逻辑层实施事务 <aop:pointcut 
		id="txPointcut" expression="execution(* cn.ziran.ssm.service.impl.*.*(..))" 
		/> Advisor定义，切入点和通知分别为txPointcut、txAdvice <aop:advisor advice-ref="txAdvice" 
		pointcut-ref=txPointcut /> </aop:config> -->


	<!-- elastic-job -->
	<import resource="classpath:elastic-job.xml" />


</beans>		